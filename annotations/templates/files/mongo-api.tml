// {{.Struct.Object.Name}}DB defines a structure which provide DB CRUD operations 
// using mongo as the underline db.
type {{.Struct.Object.Name}}DB struct{
  Metrics metrics.Metrics   
  DB db.Mongod
}

// Delete attempts to remove the record from the db using the provided publicID.
// Records using this DB must have a public id value, expressed either by a bson or json tag 
// on the given {{.Struct.Package}}.{{.Struct.Object.Name}} struct.
func (mdb *{{.Struct.Object.Name}}DB) Delete(ctx context.Context, publicID string) error {

}

// Create attempts to add the record into the db using the provided instance of the 
// {{.Struct.Package}}.{{.Struct.Object.Name}}.
// Records using this DB must have a public id value, expressed either by a bson or json tag 
// on the given {{.Struct.Object.Name}} struct.
func (mdb *{{.Struct.Object.Name}}DB) Create(ctx context.Context, elem {{.Struct.Package}}.{{.Struct.Object.Name}}) error {

}

// GetAll retrieves all records from the db and returns a slice of {{.Struct.Package}}.{{.Struct.Object.Name}} type.
// Records using this DB must have a public id value, expressed either by a bson or json tag 
// on the given {{.Struct.Object.Name}} struct.
func (mdb *{{.Struct.Object.Name}}DB) GetAll(ctx context.Context)  ([]{{.Struct.Package}}.{{.Struct.Object.Name}},  error) {

}

// Get retrieves a record from the db using the public_id and returns the {{.Struct.Package}}.{{.Struct.Object.Name}} type.
// Records using this DB must have a public id value, expressed either by a bson or json tag 
// on the given {{.Struct.Object.Name}} struct.
func (mdb *{{.Struct.Object.Name}}DB) GetAll(ctx context.Context, publicID string)  ({{.Struct.Package}}.{{.Struct.Object.Name}},  error) {

}


// Update uses a record from the db using the public_id and returns the {{.Struct.Package}}.{{.Struct.Object.Name}} type.
// Records using this DB must have a public id value, expressed either by a bson or json tag 
// on the given {{.Struct.Object.Name}} struct.
func (mdb *{{.Struct.Object.Name}}DB) Update(ctx context.Context, publicID string, {{.Struct.Package}}.{{.Struct.Object.Name}}) error {

}