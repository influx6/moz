// Register registers the giving route into the provided httptreemux function with the
// provided router and prefixed path.
func Register(router httputil.Router, api *HTTPApi, version string, resource string) {
	router.Handle("GET",fmt.Sprintf("/%s/%s", version, resource), api.GetAll)
	router.Handle("GET",fmt.Sprintf("/%s/%s/:public_id", version, resource), api.Get)

	router.Handle("POST",fmt.Sprintf("/%s/%s", version, resource), api.Create)

	router.Handle("PUT",fmt.Sprintf("/%s/%s/:public_id", version, resource), api.Update)
	router.Handle("DELETE",fmt.Sprintf("/%s/%s/:public_id", version, resource), api.Delete)
}


//================================================================================================

// APIOperator defines an interface which allows the HTTPApi to divert the final operation of
// the given CRUD request for the {{quote .Struct.Object.Name}} type. This is provided by the user.
type APIOperator interface{
		Delete(context.Context, string) error
		Get(context.Context, string) ({{.Struct.Package}}.{{.Struct.Object.Name}}, error)
		Update(context.Context, string, {{.UpdateAction.Package}}.{{.UpdateAction.Object.Name}}) error
		GetAll(context.Context, string, string, int, int) ([]{{.Struct.Package}}.{{.Struct.Object.Name}}, int, error)
		Create(context.Context, {{.CreateAction.Package}}.{{.CreateAction.Object.Name}}) ({{.Struct.Package}}.{{.Struct.Object.Name}}, error)
}

// {{.Struct.Object.Name}}Records defines a type to represent the response given to a request for
// all records of the type {{.Struct.Package}}.{{.Struct.Object.Name}}.
type {{.Struct.Object.Name}}Records struct {
	 Page int `json:"page"`
	 ResponsePerPage int `json:"responsePerPage"`
	 TotalRecords int `json:"total_records"`
	 Records []{{.Struct.Package}}.{{.Struct.Object.Name}} `json:"records"`
}

//================================================================================================

// HTTPApi defines a struct which holds the http api handlers for providing CRUD
// operations for the provided {{quote .Struct.Object.Name}} type.
type HTTPApi struct{
		operator APIOperator
		metrics metrics.Metrics
}

// New returns a new HTTPApi instance using the provided operator and
// metric.
func New(m metrics.Metrics, operator APIOperator) *HTTPApi {
		return &HTTPApi{
				operator: operator,
				metrics: m,
		}
}

// Create receives an http request to create a new {{quote .Struct.Object.Name}}.
//
// Route: /{Route}/:public_id
// Method: POST
// BODY: JSON
//
func (api *HTTPApi) Create(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("HTTPApi.Create").WithTrace(m.End()))

		ctx.Header().Set("Content-Type", "application/json")

		api.metrics.Emit(metrics.Info("Create request received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
		}))

		var incoming {{.Struct.Package}}.{{.Struct.Object.Name}}

		if err := json.NewDecoder(ctx.Body()).Decode(&incoming); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to parse params and url.Values").WithFields(metrics.Field{
						"error": err,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

		api.metrics.Emit(metrics.Info("JSON received").WithFields(metrics.Field{
				"data": incoming,
				"url": ctx.Request().URL.String(),
		}))

		response, err := api.operator.Create(ctx, incoming);
		if err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to create record").WithFields(metrics.Field{
						"error": err,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

		api.metrics.Emit(metrics.Info("Response Delivered").WithFields(metrics.Field{
			"url":       ctx.Request().URL.String(),
			"status": http.StatusCreated,
		}))

		if err := ctx.JSON(http.StatusCreated, response); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to deliver response").WithFields(metrics.Field{
						"error": err,
						"url": ctx.Request().URL.String(),
				}))
				return err
		}

		return nil
}

// Update receives an http request to create a new {{quote .Struct.Object.Name}}.
//
// Route: /{Route}/:public_id
// Method: PUT
// BODY: JSON
//
func (api *HTTPApi) Update(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("HTTPApi.Update").WithTrace(m.End()))

		ctx.Header().Set("Content-Type", "application/json")

		api.metrics.Emit(metrics.Info("Update request received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
		}))


	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params").WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return errors.New("piblicId parameter not found")
	}


		var incoming {{.Struct.Package}}.{{.Struct.Object.Name}}

		if err := json.NewDecoder(ctx.Body()).Decode(&incoming); err != nil {
		api.metrics.Emit(metrics.Errorf("Failed to decode request body").WithFields(metrics.Field{
			"error":     err.Error(),
						"public_id": publicID,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

		api.metrics.Emit(metrics.Info("JSON received").WithFields(metrics.Field{
				"data": incoming,
				"url": ctx.Request().URL.String(),
				"public_id": publicID,
		}))

		if err := api.operator.Update(ctx, publicID, incoming); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to parse params and url.Values").WithFields(metrics.Field{
						"error": err,
						"public_id": publicID,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

	api.metrics.Emit(metrics.Info("Response Delivered").WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusNoContent,
	}))

		return ctx.NoContent(http.StatusNoContent)
}

// Delete receives an http request to create a new {{quote .Struct.Object.Name}}.
//
// Route: /{Route}/:public_id
// Method: DELETE
//
func (api *HTTPApi) Delete(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("HTTPApi.Delete").WithTrace(m.End()))

		api.metrics.Emit(metrics.Info("Delete request received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
		}))

	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params").WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return fmt.Errorf("No public_id provided in params")
	}

		api.metrics.Emit(metrics.Info("JSON received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
				"public_id": publicID,
		}))

		if err := api.operator.Delete(ctx, publicID); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to delete {{.Struct.Package}}.{{.Struct.Object.Name}} record").WithFields(metrics.Field{
						"error": err,
						"public_id": publicID,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

	api.metrics.Emit(metrics.Info("Response Delivered").WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusNoContent,
	}))

		return ctx.NoContent(http.StatusNoContent)
}

// Get receives an http request to create a new {{quote .Struct.Object.Name}}.
//
// Route: /{Route}/:public_id
// Method: GET
// RESPONSE-BODY: JSON
func (api *HTTPApi) Get(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("HTTPApi.Get").WithTrace(m.End()))

		ctx.Header().Set("Content-Type", "application/json")

		api.metrics.Emit(metrics.Info("Get request received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
		}))

	publicID, ok := ctx.Bag().GetString("public_id")
	if !ok {
		api.metrics.Emit(metrics.Errorf("No public_id provided in params").WithFields(metrics.Field{
			"url": ctx.Request().URL.String(),
		}))

		return errors.New("public_id parameter not found")
	}

		requested, err := api.operator.Get(ctx, publicID)
		if err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to get {{.Struct.Package}}.{{.Struct.Object.Name}} record").WithFields(metrics.Field{
						"error": err,
						"public_id": publicID,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

		if err := ctx.JSON(http.StatusOK, requested); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to get serialized {{.Struct.Package}}.{{.Struct.Object.Name}} record to response writer").WithFields(metrics.Field{
						"error": err,
						"public_id": publicID,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

	api.metrics.Emit(metrics.Info("Response Delivered").WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"public_id": publicID,
		"status": http.StatusOK,
	}))

		return nil
}

// GetAll receives an http request to return all {{quote .Struct.Object.Name}} records.
//
// Route: /{Route}/
// Method: GET
// RESPONSE-BODY: JSON
func (api *HTTPApi) GetAll(ctx *httputil.Context) error {
	m := metrics.NewTrace()
	defer api.metrics.Emit(metrics.Info("HTTPApi.GetAll").WithTrace(m.End()))

		ctx.Header().Set("Content-Type", "application/json")

		api.metrics.Emit(metrics.Info("GetAll request received").WithFields(metrics.Field{
				"url": ctx.Request().URL.String(),
		}))

	var order, orderBy string

	if od, ok := ctx.Bag().Get("order"); ok {
		if ordr, ok := od.(string); ok {
			order = ordr
		} else {
			order = "asc"
		}
	}

	if od, ok := ctx.Bag().Get("orderBy"); ok {
		if ordr, ok := od.(string); ok {
			orderBy = ordr
		} else {
			orderBy = "public_id"
		}
	}

	var err error
	var pageNo, responsePerPage int

	if rpp, ok := ctx.Bag().GetString("responsePerPage"); ok {
		responsePerPage, err = strconv.Atoi(rpp)
		if err != nil {
			api.metrics.Emit(metrics.Errorf("Failed to retrieve responserPerPage number details").WithFields(metrics.Field{
				"error":     err,
				"url":       ctx.Request().URL.String(),
			}))
		}
	}else{
		responsePerPage = -1
	}

	if pg, ok := ctx.Bag().GetString("page"); ok {
		pageNo, err = strconv.Atoi(pg)
		if err != nil {
			api.metrics.Emit(metrics.Errorf("Failed to retrieve page number details").WithFields(metrics.Field{
				"error":     err,
				"url":       ctx.Request().URL.String(),
			}))
		}
	}else {
		pageNo = -1
	}

		requested, total, err := api.operator.GetAll(ctx, order, orderBy, pageNo, responsePerPage)
		if err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to get all {{.Struct.Package}}.{{.Struct.Object.Name}} record").WithFields(metrics.Field{
						"error": err,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

		if err := ctx.JSON(http.StatusOK,{{.Struct.Object.Name}}Records{
				Page: pageNo,
				Records: requested,
				TotalRecords: total,
				ResponsePerPage: responsePerPage,
		}); err != nil {
				api.metrics.Emit(metrics.Errorf("Failed to get serialized {{.Struct.Package}}.{{.Struct.Object.Name}} record to response writer").WithFields(metrics.Field{
						"error": err,
						"url": ctx.Request().URL.String(),
				}))

				return err
		}

	api.metrics.Emit(metrics.Info("Response Delivered").WithFields(metrics.Field{
		"url":       ctx.Request().URL.String(),
		"status": http.StatusOK,
	}))

		return nil
}

//================================================================================================
